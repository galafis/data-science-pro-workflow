# CI/CD Workflow for Data Science Pro Workflow
# Author: Gabriel Demetrios Lafis (@galafis)
# This workflow runs on push and pull request events to the main branch
# It performs code quality checks (black, flake8, isort), runs tests (pytest), and generates coverage reports

name: CI/CD Pipeline

# Trigger workflow on push and pull requests to main branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint, Test, and Coverage
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort pytest pytest-cov
          # Install project dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install the package in editable mode if setup.py or pyproject.toml exists
          if [ -f setup.py ] || [ -f pyproject.toml ]; then pip install -e .; fi
      
      - name: Run Black (code formatter check)
        run: |
          echo "Checking code formatting with Black..."
          black --check --diff --color .
        continue-on-error: false
      
      - name: Run isort (import sorting check)
        run: |
          echo "Checking import sorting with isort..."
          isort --check-only --diff --color .
        continue-on-error: false
      
      - name: Run Flake8 (linting)
        run: |
          echo "Running Flake8 linter..."
          # Ignore E203 (whitespace before ':') and W503 (line break before binary operator) for Black compatibility
          # Max line length set to 88 to match Black's default
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --ignore=E203,W503 --statistics
      
      - name: Run pytest with coverage
        run: |
          echo "Running pytest with coverage..."
          # Create tests directory if it doesn't exist
          mkdir -p tests
          # Run pytest with coverage if tests exist, otherwise skip
          if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
            pytest --cov=src --cov=api --cov=dashboards --cov-report=term-missing --cov-report=xml --cov-report=html
          else
            echo "No tests found in tests/ directory. Skipping pytest."
          fi
      
      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Generate coverage badge
        if: matrix.python-version == '3.11' && github.ref == 'refs/heads/main'
        run: |
          echo "Coverage report generated successfully!"
          # Badge will be displayed via Codecov or shields.io
      
      - name: Check docstrings with pydocstyle (optional)
        run: |
          pip install pydocstyle
          echo "Checking docstrings..."
          # Run pydocstyle but don't fail the build
          pydocstyle src/ || echo "Docstring warnings detected (non-blocking)"
        continue-on-error: true
  
  # Example of additional job for building documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx-rtd-theme
      
      - name: Build Sphinx documentation
        run: |
          echo "Documentation build would happen here"
          # sphinx-build -b html docs/ docs/_build/html
        continue-on-error: true
